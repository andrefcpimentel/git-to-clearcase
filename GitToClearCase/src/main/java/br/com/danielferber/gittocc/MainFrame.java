/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.danielferber.gittocc;

//import br.com.danielferber.gittocc.cc.ClearToolActivity;
//import br.com.danielferber.gittocc.cc.ClearToolDriver;
import br.com.danielferber.gittocc.cc.ClearToolProcessBuilder;
import br.com.danielferber.gittocc.cc.VobUpdater;
import br.com.danielferber.gittocc.git.GitHistory;
import br.com.danielferber.gittocc.git.GitHistoryBuilder;
import br.com.danielferber.gittocc.git.GitProcessBuilder;
import ch.qos.logback.classic.spi.ILoggingEvent;
import com.ibm.icu.text.MessageFormat;
import java.awt.Color;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.FieldPosition;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;
import java.util.Queue;
import java.util.Scanner;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.SpinnerNumberModel;
import javax.swing.SwingUtilities;

/**
 *
 * @author X7WS
 */
public class MainFrame extends javax.swing.JFrame {

    Future<?> tarefa;
    final ExecutorService tarefaExecutor = Executors.newCachedThreadPool();
    final DefaultListModel logListModel = new DefaultListModel();
    boolean isConfigurationValid = false;

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        SwingAppender.add(new SwingAppender.Handler() {
            Queue<ILoggingEvent> queue = new ConcurrentLinkedQueue<ILoggingEvent>();

            public void handle(final ILoggingEvent e) {
                queue.add(e);
                SwingUtilities.invokeLater(new Runnable() {
                    public void run() {
                        logListModel.add(0,e);
                    }
                });
            }
        });
        jList1.setCellRenderer(new LogListCellRenderer());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane6 = new javax.swing.JTabbedPane();
        configurationPanel = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        gitRepositoryDirField = new javax.swing.JTextField();
        gitExecutableField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        ccVobDirField = new javax.swing.JTextField();
        ccExecutableField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        configurationValidationMessageField = new javax.swing.JLabel();
        synchronizationPanel = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        ccCreateActivityField = new javax.swing.JCheckBox();
        ccActivityHeadlineSampleField = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        ccActivityHeadlinePatternField = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList();
        jLabel10 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        ccDeleteEmptyDirsField = new javax.swing.JCheckBox();
        executionPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jButton3 = new javax.swing.JButton();
        reportPanel = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton4 = new javax.swing.JButton();
        sessionVersionField = new javax.swing.JSpinner();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder("Git"));

        gitRepositoryDirField.setText("K:\\git\\jconsuelo-sync");
        gitRepositoryDirField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                configurationFieldKeyTyped(evt);
            }
        });

        gitExecutableField.setText("C:\\Users\\x7ws\\Programas\\PortableGit\\bin\\git.exe");
        gitExecutableField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gitExecutableFieldActionPerformed(evt);
            }
        });
        gitExecutableField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                configurationFieldKeyTyped(evt);
            }
        });

        jLabel4.setText("Executável GIT:");

        jLabel13.setText("Git working directory:");

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(gitRepositoryDirField))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(gitExecutableField)))
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(gitRepositoryDirField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(gitExecutableField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 8, Short.MAX_VALUE))
        );

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("ClearCase"));

        ccVobDirField.setText("K:\\CcViews\\X7WS_JCONSUELO_UCM_DVL_MI00248890_SYNC\\JCONSUELO\\Fontes");
        ccVobDirField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                configurationFieldKeyTyped(evt);
            }
        });

        ccExecutableField.setText("C:\\Program Files\\IBM\\RationalSDLC\\ClearCase\\bin\\cleartool.exe");
        ccExecutableField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                ccExecutableFieldKeyTyped(evt);
            }
        });

        jLabel5.setText("Executável ClearTool:");

        jLabel2.setText("Clear Case UCM view:");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ccVobDirField))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ccExecutableField, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(ccVobDirField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(ccExecutableField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 9, Short.MAX_VALUE))
        );

        configurationValidationMessageField.setText("As configurações estão corretas.");

        javax.swing.GroupLayout configurationPanelLayout = new javax.swing.GroupLayout(configurationPanel);
        configurationPanel.setLayout(configurationPanelLayout);
        configurationPanelLayout.setHorizontalGroup(
            configurationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, configurationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(configurationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, configurationPanelLayout.createSequentialGroup()
                        .addComponent(configurationValidationMessageField)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        configurationPanelLayout.setVerticalGroup(
            configurationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(configurationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(configurationValidationMessageField)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(91, Short.MAX_VALUE))
        );

        jTabbedPane6.addTab("Configurações", configurationPanel);

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder("Atividade ClearCase"));

        ccCreateActivityField.setSelected(true);
        ccCreateActivityField.setText("Criar nova atividade ClearCase");

        ccActivityHeadlineSampleField.setEditable(false);

        jLabel11.setText("Exemplo:");

        ccActivityHeadlinePatternField.setText("[NTI272977] Teste 1.2.{sessionCounter} em {sessionDate} ({gitCommitTo})");
        ccActivityHeadlinePatternField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                ccActivityHeadlinePatternFieldKeyTyped(evt);
            }
        });

        jList2.setBackground(javax.swing.UIManager.getDefaults().getColor("Panel.background"));
        jList2.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "{gitCommitFrom}", "{gitCommitTo}", "{sessionDate}", "{sessionCounter}" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jList2.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jList2.setFocusable(false);
        jList2.setLayoutOrientation(javax.swing.JList.VERTICAL_WRAP);
        jList2.setVisibleRowCount(0);
        jScrollPane2.setViewportView(jList2);

        jLabel10.setText("Título:");

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ccActivityHeadlinePatternField, javax.swing.GroupLayout.DEFAULT_SIZE, 482, Short.MAX_VALUE))
                    .addComponent(jScrollPane2)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(ccCreateActivityField)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ccActivityHeadlineSampleField)))
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addComponent(ccCreateActivityField)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ccActivityHeadlinePatternField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(ccActivityHeadlineSampleField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButton1.setText("Executar Sincronização");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Operações de sincronização"));

        ccDeleteEmptyDirsField.setSelected(true);
        ccDeleteEmptyDirsField.setText("Apagar diretórios vazios");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ccDeleteEmptyDirsField)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(ccDeleteEmptyDirsField)
                .addGap(0, 20, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout synchronizationPanelLayout = new javax.swing.GroupLayout(synchronizationPanel);
        synchronizationPanel.setLayout(synchronizationPanelLayout);
        synchronizationPanelLayout.setHorizontalGroup(
            synchronizationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, synchronizationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(synchronizationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel9, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(synchronizationPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton1)))
                .addContainerGap())
        );
        synchronizationPanelLayout.setVerticalGroup(
            synchronizationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(synchronizationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addContainerGap())
        );

        jTabbedPane6.addTab("Sincronização", synchronizationPanel);

        jList1.setModel(logListModel);
        jScrollPane1.setViewportView(jList1);

        jButton3.setText("Cancelar");

        javax.swing.GroupLayout executionPanelLayout = new javax.swing.GroupLayout(executionPanel);
        executionPanel.setLayout(executionPanelLayout);
        executionPanelLayout.setHorizontalGroup(
            executionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(executionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 548, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, executionPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jButton3))
        );
        executionPanelLayout.setVerticalGroup(
            executionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(executionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 249, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3))
        );

        jTabbedPane6.addTab("Execução", executionPanel);

        jButton2.setText("Preparar Relatório");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane3.setViewportView(jTextArea1);

        jButton4.setText("Efetivar");

        sessionVersionField.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(1), null, null, Integer.valueOf(1)));

        jLabel3.setText("Versão:");

        javax.swing.GroupLayout reportPanelLayout = new javax.swing.GroupLayout(reportPanel);
        reportPanel.setLayout(reportPanelLayout);
        reportPanelLayout.setHorizontalGroup(
            reportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(reportPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(reportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addGroup(reportPanelLayout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sessionVersionField, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 237, Short.MAX_VALUE)
                        .addComponent(jButton4)))
                .addContainerGap())
        );
        reportPanelLayout.setVerticalGroup(
            reportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(reportPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(reportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(reportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(sessionVersionField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton2))
                    .addComponent(jButton4))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane6.addTab("Relatório", reportPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane6)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        runSynchronization();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void gitExecutableFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gitExecutableFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_gitExecutableFieldActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        loadFieldValues();
        updateConfigurationValidation();
        if (isConfigurationValid) {
            jTabbedPane6.setSelectedComponent(synchronizationPanel);
        } else {
            jTabbedPane6.setSelectedComponent(configurationPanel);
        }
        updateActivityHeadlineSample();
    }//GEN-LAST:event_formWindowOpened

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        saveFiledValues();
    }//GEN-LAST:event_formWindowClosed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        saveFiledValues();
    }//GEN-LAST:event_formWindowClosing

    private void configurationFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_configurationFieldKeyTyped
        updateConfigurationValidation();
    }//GEN-LAST:event_configurationFieldKeyTyped

    private void ccExecutableFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ccExecutableFieldKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_ccExecutableFieldKeyTyped

    private void ccActivityHeadlinePatternFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ccActivityHeadlinePatternFieldKeyTyped
        updateActivityHeadlineSample();
    }//GEN-LAST:event_ccActivityHeadlinePatternFieldKeyTyped
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField ccActivityHeadlinePatternField;
    private javax.swing.JTextField ccActivityHeadlineSampleField;
    private javax.swing.JCheckBox ccCreateActivityField;
    private javax.swing.JCheckBox ccDeleteEmptyDirsField;
    private javax.swing.JTextField ccExecutableField;
    private javax.swing.JTextField ccVobDirField;
    private javax.swing.JPanel configurationPanel;
    private javax.swing.JLabel configurationValidationMessageField;
    private javax.swing.JPanel executionPanel;
    private javax.swing.JTextField gitExecutableField;
    private javax.swing.JTextField gitRepositoryDirField;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JList jList1;
    private javax.swing.JList jList2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane6;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JPanel reportPanel;
    private javax.swing.JSpinner sessionVersionField;
    private javax.swing.JPanel synchronizationPanel;
    // End of variables declaration//GEN-END:variables

    private void loadFieldValues() {
        File userDir = new File(System.getProperty("user.dir"));
        File propertiesFile = new File(userDir, "gittocc.properties");

        if (!propertiesFile.exists()) {
            return;
        }

        FileInputStream fi = null;
        try {
            fi = new FileInputStream(propertiesFile);

            Properties p = new Properties();
            p.load(fi);
            gitRepositoryDirField.setText(p.getProperty("git.repository", ""));
            gitExecutableField.setText(p.getProperty("git.executable", ""));
            ccVobDirField.setText(p.getProperty("cc.vob", ""));
            ccExecutableField.setText(p.getProperty("cc.executable", ""));
            ccCreateActivityField.setSelected(Boolean.parseBoolean(p.getProperty("cc.activity.create", "true")));
            ccActivityHeadlinePatternField.setText(p.getProperty("cc.activity.pattern", "<git-commit>"));
            ccDeleteEmptyDirsField.setSelected(Boolean.parseBoolean(p.getProperty("cc.operarion.deleteEmptyDirs", "true")));
            fi.close();
        } catch (IOException e) {
            JOptionPane.showMessageDialog(MainFrame.this, e.getLocalizedMessage(), "Salvar propriedades", JOptionPane.ERROR_MESSAGE);
        } finally {
            if (fi != null) {
                try {
                    fi.close();
                } catch (IOException e) {
                    // ignore;
                }
            }
        }
    }

    private void saveFiledValues() {
        File userDir = new File(System.getProperty("user.dir"));
        File propertiesFile = new File(userDir, "gittocc.properties");

        FileOutputStream of = null;
        try {
            of = new FileOutputStream(propertiesFile);

            Properties p = new Properties();
            p.setProperty("git.repository", gitRepositoryDirField.getText());
            p.setProperty("git.executable", gitExecutableField.getText());
            p.setProperty("cc.vob", ccVobDirField.getText());
            p.setProperty("cc.executable", ccExecutableField.getText());
            p.setProperty("cc.activity.create", Boolean.toString(ccCreateActivityField.isSelected()));
            p.setProperty("cc.activity.pattern", ccActivityHeadlinePatternField.getText());
            p.setProperty("cc.operarion.deleteEmptyDirs", Boolean.toString(ccDeleteEmptyDirsField.isSelected()));
            p.store(of, "Git to ClearCase");
            of.close();
        } catch (IOException e) {
            JOptionPane.showMessageDialog(MainFrame.this, e.getLocalizedMessage(), "Salvar propriedades", JOptionPane.ERROR_MESSAGE);
        } finally {
            if (of != null) {
                try {
                    of.close();
                } catch (IOException e) {
                    // ignore;
                }
            }
        }
    }

    private void updateActivityHeadlineSample() {
        Map<String, Object> map = new HashMap<String, Object>();
        map.put("gitCommitFrom", "ABC123");
        map.put("gitCommitTo", "DEF456");
        map.put("sessionDate", new Date());
        map.put("sessionCounter", ((Number) sessionVersionField.getValue()).longValue());
        try {
            ccActivityHeadlineSampleField.setText(MessageFormat.format(ccActivityHeadlinePatternField.getText(), map));
        } catch (Exception e) {
            ccActivityHeadlineSampleField.setText(e.getLocalizedMessage());
        }
    }

    private void updateConfigurationValidation() {
        final File gitDir = new File(gitRepositoryDirField.getText());
        final File gitExecutable = new File(gitExecutableField.getText());
        final File ccDir = new File(ccVobDirField.getText());
        final File ccExecutable = new File(ccExecutableField.getText());
        final File ccCommitStampFile = new File(ccDir, "atualizacao-hash.txt");

        String errorMessage = null;
        isConfigurationValid = true;
        if (!gitDir.exists() || !gitDir.isDirectory()) {
            if (errorMessage == null) {
                errorMessage = "O caminho do repositório Git não existe ou não é um diretório.";
            }
            isConfigurationValid = false;
            gitRepositoryDirField.setForeground(Color.red);
        } else {
            gitRepositoryDirField.setForeground(configurationPanel.getForeground());
        }

        if (!gitExecutable.exists() || !gitExecutable.isFile() || !gitExecutable.canExecute()) {
            if (errorMessage == null) {
                errorMessage = "O caminho da ferramenta GIT não existe ou não é arquivo executável.";
            }
            gitExecutableField.setForeground(Color.red);
            isConfigurationValid = false;
        } else {
            gitExecutableField.setForeground(configurationPanel.getForeground());
        }

        if (!ccDir.exists() || !ccDir.isDirectory()) {
            if (errorMessage == null) {
                errorMessage = "O caminho da view Clearcase não existe ou não é um diretório.";
            }
            ccVobDirField.setForeground(Color.red);
            isConfigurationValid = false;
        } else {
            ccVobDirField.setForeground(configurationPanel.getForeground());
        }

        if (!ccExecutable.exists() || !ccExecutable.isFile() || !ccExecutable.canExecute()) {
            if (errorMessage == null) {
                errorMessage = "O caminho da ferramenta ClearTool não existe ou não é arquivo executável.";
            }
            ccExecutableField.setForeground(Color.red);
            isConfigurationValid = false;
        } else {
            ccExecutableField.setForeground(configurationPanel.getForeground());
        }

        if (!ccCommitStampFile.exists() || !ccCommitStampFile.isFile() || !gitExecutable.canRead()) {
            isConfigurationValid = false;
            if (errorMessage == null) {
                errorMessage = "O caminho da marca na vob Clearcase não existe ou não é um arquivo válido.";
            }
        }

        if (errorMessage != null) {
            configurationValidationMessageField.setText(errorMessage);
            configurationValidationMessageField.setForeground(Color.red);
        } else {
            configurationValidationMessageField.setText("As configurações estão corretas.");
            configurationValidationMessageField.setForeground(configurationPanel.getForeground());
        }
    }

    private void runSynchronization() {
        synchronized (this) {
            if (tarefa != null && !tarefa.isDone()) {
                /* A tarefa ainda está executando. */
                tarefa.cancel(true);
            } else {
                final File gitDir = new File(gitRepositoryDirField.getText());
                final File gitExecutable = new File(gitExecutableField.getText());
                final File ccDir = new File(ccVobDirField.getText());
                final File ccExecutable = new File(ccExecutableField.getText());
                final File ccCommitStampFile = new File(ccDir, "atualizacao-hash.txt");
                final String previousCommit;

                try {
                    if (!gitDir.exists() || !gitDir.isDirectory()) {
                        throw new IOException("O caminho do repositório Git não existe ou não é um diretório.");
                    }
                    if (!gitExecutable.exists() || !gitExecutable.isFile() || !gitExecutable.canExecute()) {
                        throw new IOException("O caminho da ferramenta GIT não existe ou não é arquivo executável.");
                    }
                    if (!ccDir.exists() || !ccDir.isDirectory()) {
                        throw new IOException("O caminho da view Clearcase não existe ou não é um diretório.");
                    }
                    if (!ccExecutable.exists() || !ccExecutable.isFile() || !ccExecutable.canExecute()) {
                        throw new IOException("O caminho da ferramenta ClearTool não existe ou não é arquivo executável.");
                    }
                    if (!ccCommitStampFile.exists() || !ccCommitStampFile.isFile() || !gitExecutable.canRead()) {
                        throw new IOException("O caminho da marca na vob Clearcase não existe ou não é um arquivo válido.");
                    }
                    previousCommit = new Scanner(ccCommitStampFile).next();
                } catch (IOException e) {
                    JOptionPane.showMessageDialog(this, e.getMessage(), "Parâmetros inválidos", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                tarefa = tarefaExecutor.submit(new Runnable() {
                    public void run() {
                        SwingUtilities.invokeLater(new Runnable() {
                            public void run() {
                                jButton1.setEnabled(false);
                                jTabbedPane6.setSelectedComponent(executionPanel);
                                logListModel.clear();
                            }
                        });
                        try {
                            final GitProcessBuilder gitProcessBuilder = new GitProcessBuilder(gitDir, gitExecutable);
                            final GitHistoryBuilder historyBuilder = new GitHistoryBuilder(gitProcessBuilder, gitDir, previousCommit);
                            final GitHistory gitHistory = historyBuilder.call();
                            final ClearToolProcessBuilder clearToolProcessBuilder = new ClearToolProcessBuilder(ccDir, ccExecutable);
                            final VobUpdater vobUpdater = new VobUpdater(gitHistory, clearToolProcessBuilder, ccDir);
                            vobUpdater.setCreateActivity(ccCreateActivityField.isSelected());

                            Map<String, Object> map = new HashMap<String, Object>();
                            map.put("gitCommitFrom", gitHistory.getFromCommit());
                            map.put("gitCommitTo", gitHistory.getToCommit());
                            map.put("sessionDate", new Date());
                            map.put("sessionCounter", ((Number) sessionVersionField.getValue()).longValue());

                            vobUpdater.setHeadline(MessageFormat.format(ccActivityHeadlinePatternField.getText(), map));
                            vobUpdater.setCreateActivity(ccCreateActivityField.isSelected());
                            vobUpdater.setDeleteEmptyDirs(ccDeleteEmptyDirsField.isSelected());
                            vobUpdater.call();

                        } catch (final Exception e) {
                            SwingUtilities.invokeLater(new Runnable() {
                                public void run() {
                                    String mensagem = "Falha ao sincronizar view ClearCase com repositório GIT.\n" + e.getMessage();
                                    Exception ee = e;
                                    while (ee.getCause() != null && ee.getCause() != ee) {
                                        ee = (Exception) ee.getCause();
                                        mensagem += "\n" + ee.getMessage();
                                    }
                                    JOptionPane.showMessageDialog(MainFrame.this, mensagem, "Erro na sincronização", JOptionPane.ERROR_MESSAGE);
                                }
                            });
                        } finally {
                            SwingUtilities.invokeLater(new Runnable() {
                                public void run() {
                                    jButton1.setEnabled(true);
                                }
                            });
                            synchronized (MainFrame.this) {
                                tarefa = null;
                            }
                        }
                    }
                });
            }
        }
    }
}