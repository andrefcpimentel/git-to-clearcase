/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.danielferber.gittocc;

//import br.com.danielferber.gittocc.cc.ClearToolActivity;
//import br.com.danielferber.gittocc.cc.ClearToolDriver;
import br.com.danielferber.gittocc.cc.ClearToolCommander;
import br.com.danielferber.gittocc.cc.ClearToolProcessBuilder;
import br.com.danielferber.gittocc.external.History;
import br.com.danielferber.gittocc.external.HistoryPreviewBuilder;
import br.com.danielferber.gittocc.external.JConsueloHistoricoBuilder;
import br.com.danielferber.gittocc.external.JConsueloHistoricoMerge;
import br.com.danielferber.gittocc.external.JConsueloHistoricoWritter;
import br.com.danielferber.gittocc.git.GitCommander;
import br.com.danielferber.gittocc.git.GitProcessBuilder;
import br.com.danielferber.gittocc.sync.SyncTask;
import ch.qos.logback.classic.spi.ILoggingEvent;
import com.ibm.icu.text.MessageFormat;
import java.awt.Color;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.Queue;
import java.util.Scanner;
import java.util.concurrent.Callable;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

/**
 *
 * @author X7WS
 */
public class MainFrame extends javax.swing.JFrame {

    Future<?> tarefa;
    final ExecutorService tarefaExecutor = Executors.newCachedThreadPool();
    final DefaultListModel logListModel = new DefaultListModel();
    boolean isConfigurationValid = false;
    
    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        SwingAppender.add(new SwingAppender.Handler() {
            Queue<ILoggingEvent> queue = new ConcurrentLinkedQueue<ILoggingEvent>();

            public void handle(final ILoggingEvent e) {
                queue.add(e);
                SwingUtilities.invokeLater(new Runnable() {
                    public void run() {
                        logListModel.add(0, e);
                    }
                });
            }
        });
        jList1.setCellRenderer(new LogListCellRenderer());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane6 = new javax.swing.JTabbedPane();
        configurationPanel = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        gitRepositoryDirField = new javax.swing.JTextField();
        gitExecutableField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        ccVobDirField = new javax.swing.JTextField();
        ccExecutableField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        configurationValidationMessageField = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        relArquivoHistoricoField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        relTituloHistorico = new javax.swing.JTextField();
        synchronizationPanel = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        ccCreateActivityField = new javax.swing.JCheckBox();
        ccActivityHeadlineSampleField = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        ccActivityHeadlinePatternField = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList();
        jLabel10 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        gitFetchRemoteField = new javax.swing.JCheckBox();
        gitFastForwardField = new javax.swing.JCheckBox();
        gitFastForwardObsField = new javax.swing.JLabel();
        executionPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jButton3 = new javax.swing.JButton();
        reportPanel = new javax.swing.JPanel();
        jbPrepararRelatorio = new javax.swing.JButton();
        jbEfetivarRelatorio = new javax.swing.JButton();
        sessionVersionField = new javax.swing.JSpinner();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jePreview = new javax.swing.JEditorPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder("Git"));

        gitRepositoryDirField.setText("K:\\git\\jconsuelo-sync");
        gitRepositoryDirField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                configurationFieldKeyTyped(evt);
            }
        });

        gitExecutableField.setText("C:\\Users\\x7ws\\Programas\\PortableGit\\bin\\git.exe");
        gitExecutableField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gitExecutableFieldActionPerformed(evt);
            }
        });
        gitExecutableField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                configurationFieldKeyTyped(evt);
            }
        });

        jLabel4.setText("Executável GIT:");

        jLabel13.setText("Git working directory:");

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(gitRepositoryDirField))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(gitExecutableField)))
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(gitRepositoryDirField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(gitExecutableField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 8, Short.MAX_VALUE))
        );

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("ClearCase"));

        ccVobDirField.setText("K:\\CcViews\\X7WS_JCONSUELO_UCM_DVL_MI00248890_SYNC\\JCONSUELO\\Fontes");
        ccVobDirField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                configurationFieldKeyTyped(evt);
            }
        });

        ccExecutableField.setText("C:\\Program Files\\IBM\\RationalSDLC\\ClearCase\\bin\\cleartool.exe");
        ccExecutableField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                ccExecutableFieldKeyTyped(evt);
            }
        });

        jLabel5.setText("Executável ClearTool:");

        jLabel2.setText("Clear Case UCM view:");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ccVobDirField, javax.swing.GroupLayout.DEFAULT_SIZE, 410, Short.MAX_VALUE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ccExecutableField, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(ccVobDirField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(ccExecutableField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 9, Short.MAX_VALUE))
        );

        configurationValidationMessageField.setText("As configurações estão corretas.");

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Relatório"));

        jLabel1.setText("Arquivo relatório:");

        relArquivoHistoricoField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                configurationFieldKeyTyped(evt);
            }
        });

        jLabel6.setText("Título:");

        relTituloHistorico.setText("Sprint {sessionCounter}: Versão 1.{sessionCounter}.{releaseCounter} [{sessionDate}]");
        relTituloHistorico.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                relTituloHistoricoKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(relArquivoHistoricoField, javax.swing.GroupLayout.PREFERRED_SIZE, 428, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(relTituloHistorico, javax.swing.GroupLayout.PREFERRED_SIZE, 482, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(14, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(relTituloHistorico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(relArquivoHistoricoField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout configurationPanelLayout = new javax.swing.GroupLayout(configurationPanel);
        configurationPanel.setLayout(configurationPanelLayout);
        configurationPanelLayout.setHorizontalGroup(
            configurationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(configurationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(configurationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(configurationPanelLayout.createSequentialGroup()
                        .addComponent(configurationValidationMessageField)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        configurationPanelLayout.setVerticalGroup(
            configurationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(configurationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(configurationValidationMessageField)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(52, Short.MAX_VALUE))
        );

        jTabbedPane6.addTab("Configurações", configurationPanel);

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder("Atividade ClearCase"));

        ccCreateActivityField.setSelected(true);
        ccCreateActivityField.setText("Criar nova atividade ClearCase");

        ccActivityHeadlineSampleField.setEditable(false);

        jLabel11.setText("Exemplo:");

        ccActivityHeadlinePatternField.setText("[NTI272977] Teste 1.2.{sessionCounter} em {sessionDate} ({gitCommitTo})");
        ccActivityHeadlinePatternField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                ccActivityHeadlinePatternFieldKeyTyped(evt);
            }
        });

        jList2.setBackground(javax.swing.UIManager.getDefaults().getColor("Panel.background"));
        jList2.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "{gitCommitFrom}", "{gitCommitTo}", "{sessionDate}", "{sessionCounter}" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jList2.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jList2.setFocusable(false);
        jList2.setLayoutOrientation(javax.swing.JList.VERTICAL_WRAP);
        jList2.setVisibleRowCount(0);
        jScrollPane2.setViewportView(jList2);

        jLabel10.setText("Título:");

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ccActivityHeadlinePatternField, javax.swing.GroupLayout.DEFAULT_SIZE, 486, Short.MAX_VALUE))
                    .addComponent(jScrollPane2)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(ccCreateActivityField)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ccActivityHeadlineSampleField)))
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addComponent(ccCreateActivityField)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ccActivityHeadlinePatternField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(ccActivityHeadlineSampleField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButton1.setText("Executar Sincronização");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Git"));

        gitFetchRemoteField.setText("Obter commits remotos");

        gitFastForwardField.setText("Avançar commits");
        gitFastForwardField.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                gitFastForwardFieldStateChanged(evt);
            }
        });

        gitFastForwardObsField.setText("jLabel7");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(gitFastForwardField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(gitFastForwardObsField))
                    .addComponent(gitFetchRemoteField))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(gitFetchRemoteField)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(gitFastForwardField)
                    .addComponent(gitFastForwardObsField))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout synchronizationPanelLayout = new javax.swing.GroupLayout(synchronizationPanel);
        synchronizationPanel.setLayout(synchronizationPanelLayout);
        synchronizationPanelLayout.setHorizontalGroup(
            synchronizationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, synchronizationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(synchronizationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel9, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(synchronizationPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton1)))
                .addContainerGap())
        );
        synchronizationPanelLayout.setVerticalGroup(
            synchronizationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(synchronizationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 58, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addContainerGap())
        );

        jTabbedPane6.addTab("Sincronização", synchronizationPanel);

        jList1.setModel(logListModel);
        jScrollPane1.setViewportView(jList1);

        jButton3.setText("Cancelar");

        javax.swing.GroupLayout executionPanelLayout = new javax.swing.GroupLayout(executionPanel);
        executionPanel.setLayout(executionPanelLayout);
        executionPanelLayout.setHorizontalGroup(
            executionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(executionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 552, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, executionPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jButton3))
        );
        executionPanelLayout.setVerticalGroup(
            executionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(executionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 303, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3))
        );

        jTabbedPane6.addTab("Execução", executionPanel);

        jbPrepararRelatorio.setText("Preparar Relatório");
        jbPrepararRelatorio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbPrepararRelatorioActionPerformed(evt);
            }
        });

        jbEfetivarRelatorio.setText("Efetivar");
        jbEfetivarRelatorio.setEnabled(false);
        jbEfetivarRelatorio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbEfetivarRelatorioActionPerformed(evt);
            }
        });

        sessionVersionField.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(1), null, null, Integer.valueOf(1)));
        sessionVersionField.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sessionVersionFieldStateChanged(evt);
            }
        });

        jLabel3.setText("Versão:");

        jePreview.setContentType("text/html"); // NOI18N
        jScrollPane4.setViewportView(jePreview);

        javax.swing.GroupLayout reportPanelLayout = new javax.swing.GroupLayout(reportPanel);
        reportPanel.setLayout(reportPanelLayout);
        reportPanelLayout.setHorizontalGroup(
            reportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(reportPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(reportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4)
                    .addGroup(reportPanelLayout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sessionVersionField, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbPrepararRelatorio)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 241, Short.MAX_VALUE)
                        .addComponent(jbEfetivarRelatorio)))
                .addContainerGap())
        );
        reportPanelLayout.setVerticalGroup(
            reportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(reportPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(reportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(reportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(sessionVersionField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jbPrepararRelatorio))
                    .addComponent(jbEfetivarRelatorio))
                .addContainerGap(62, Short.MAX_VALUE))
        );

        jTabbedPane6.addTab("Relatório", reportPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane6)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane6)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        runSynchronization();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void gitExecutableFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gitExecutableFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_gitExecutableFieldActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        loadFieldValues();
        updateConfigurationValidation();
        if (isConfigurationValid) {
            jTabbedPane6.setSelectedComponent(synchronizationPanel);
        } else {
            jTabbedPane6.setSelectedComponent(configurationPanel);
        }
        updateActivityHeadlineSample();
    }//GEN-LAST:event_formWindowOpened

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        saveFiledValues();
    }//GEN-LAST:event_formWindowClosed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        saveFiledValues();
    }//GEN-LAST:event_formWindowClosing

    private void configurationFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_configurationFieldKeyTyped
        updateConfigurationValidation();
    }//GEN-LAST:event_configurationFieldKeyTyped

    private void ccExecutableFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ccExecutableFieldKeyTyped
        updateConfigurationValidation();
    }//GEN-LAST:event_ccExecutableFieldKeyTyped

    private void ccActivityHeadlinePatternFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ccActivityHeadlinePatternFieldKeyTyped
        updateActivityHeadlineSample();
    }//GEN-LAST:event_ccActivityHeadlinePatternFieldKeyTyped

    private void jbPrepararRelatorioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbPrepararRelatorioActionPerformed
        runHistoryPreview();
    }//GEN-LAST:event_jbPrepararRelatorioActionPerformed

    private void relTituloHistoricoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_relTituloHistoricoKeyReleased
        updateActivityHeadlineSample();
    }//GEN-LAST:event_relTituloHistoricoKeyReleased

    private void sessionVersionFieldStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sessionVersionFieldStateChanged
        updateVersion();
    }//GEN-LAST:event_sessionVersionFieldStateChanged

    private void jbEfetivarRelatorioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbEfetivarRelatorioActionPerformed
        runHistorySynchronization();
    }//GEN-LAST:event_jbEfetivarRelatorioActionPerformed

    private void gitFastForwardFieldStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_gitFastForwardFieldStateChanged
        if (gitFastForwardField.isSelected()) {
            gitFastForwardObsField.setText("(sincronização com a versão mais recente)");
        } else {
            gitFastForwardObsField.setText("(sincronização com a versão atualmente em checkout)");
        }
    }//GEN-LAST:event_gitFastForwardFieldStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField ccActivityHeadlinePatternField;
    private javax.swing.JTextField ccActivityHeadlineSampleField;
    private javax.swing.JCheckBox ccCreateActivityField;
    private javax.swing.JTextField ccExecutableField;
    private javax.swing.JTextField ccVobDirField;
    private javax.swing.JPanel configurationPanel;
    private javax.swing.JLabel configurationValidationMessageField;
    private javax.swing.JPanel executionPanel;
    private javax.swing.JTextField gitExecutableField;
    private javax.swing.JCheckBox gitFastForwardField;
    private javax.swing.JLabel gitFastForwardObsField;
    private javax.swing.JCheckBox gitFetchRemoteField;
    private javax.swing.JTextField gitRepositoryDirField;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JList jList1;
    private javax.swing.JList jList2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane6;
    private javax.swing.JButton jbEfetivarRelatorio;
    private javax.swing.JButton jbPrepararRelatorio;
    private javax.swing.JEditorPane jePreview;
    private javax.swing.JTextField relArquivoHistoricoField;
    private javax.swing.JTextField relTituloHistorico;
    private javax.swing.JPanel reportPanel;
    private javax.swing.JSpinner sessionVersionField;
    private javax.swing.JPanel synchronizationPanel;
    // End of variables declaration//GEN-END:variables

    private void loadFieldValues() {
        File userDir = new File(System.getProperty("user.dir"));
        File propertiesFile = new File(userDir, "gittocc.properties");

        if (!propertiesFile.exists()) {
            return;
        }

        FileInputStream fi = null;
        try {
            fi = new FileInputStream(propertiesFile);

            Properties p = new Properties();
            p.load(fi);
            gitRepositoryDirField.setText(p.getProperty("git.repository", ""));
            gitExecutableField.setText(p.getProperty("git.executable", ""));
            gitFastForwardField.setSelected(Boolean.parseBoolean(p.getProperty("git.fastForward", "true")));
            gitFetchRemoteField.setSelected(Boolean.parseBoolean(p.getProperty("git.fetchRemote", "true")));

            ccVobDirField.setText(p.getProperty("cc.vob", ""));
            ccExecutableField.setText(p.getProperty("cc.executable", ""));
            ccCreateActivityField.setSelected(Boolean.parseBoolean(p.getProperty("cc.activity.create", "true")));
            ccActivityHeadlinePatternField.setText(p.getProperty("cc.activity.pattern", "<git-commit>"));

            relArquivoHistoricoField.setText(p.getProperty("rel.relatorio.file", ""));
            fi.close();
            sessionVersionField.setValue( getVersion() );
        } catch (IOException e) {
            JOptionPane.showMessageDialog(MainFrame.this, e.getLocalizedMessage(), "Salvar propriedades", JOptionPane.ERROR_MESSAGE);
        } finally {
            if (fi != null) {
                try {
                    fi.close();
                } catch (IOException e) {
                    // ignore;
                }
            }
        }
    }

    private void saveFiledValues() {
        File userDir = new File(System.getProperty("user.dir"));
        File propertiesFile = new File(userDir, "gittocc.properties");

        FileOutputStream of = null;
        try {
            of = new FileOutputStream(propertiesFile);

            Properties p = new Properties();
            p.setProperty("git.repository", gitRepositoryDirField.getText());
            p.setProperty("git.executable", gitExecutableField.getText());
            p.setProperty("git.fastForward", Boolean.toString(gitFastForwardField.isSelected()));
            p.setProperty("git.fetchRemote", Boolean.toString(gitFetchRemoteField.isSelected()));

            p.setProperty("cc.vob", ccVobDirField.getText());
            p.setProperty("cc.executable", ccExecutableField.getText());
            p.setProperty("cc.activity.create", Boolean.toString(ccCreateActivityField.isSelected()));
            p.setProperty("cc.activity.pattern", ccActivityHeadlinePatternField.getText());
            p.setProperty("rel.relatorio.file", relArquivoHistoricoField.getText());
            p.store(of, "Git to ClearCase");
            of.close();
        } catch (IOException e) {
            JOptionPane.showMessageDialog(MainFrame.this, e.getLocalizedMessage(), "Salvar propriedades", JOptionPane.ERROR_MESSAGE);
        } finally {
            if (of != null) {
                try {
                    of.close();
                } catch (IOException e) {
                    // ignore;
                }
            }
        }
    }

    private void updateActivityHeadlineSample() {
        Map<String, Object> map = new HashMap<String, Object>();
        map.put("gitCommitFrom", "ABC123");
        map.put("gitCommitTo", "DEF456");
        map.put("sessionDate", new Date());
        map.put("sessionCounter", ((Number) sessionVersionField.getValue()).longValue());
        map.put("releaseCounter", ((Number) sessionVersionField.getValue()).longValue());
        try {
            ccActivityHeadlineSampleField.setText(MessageFormat.format(ccActivityHeadlinePatternField.getText(), map));
        } catch (Exception e) {
            ccActivityHeadlineSampleField.setText(e.getLocalizedMessage());
        }
    }

    private String getTituloHistorico() throws IOException {
        Map<String, Object> map = new HashMap<String, Object>();
        map.put("sessionCounter", ((Number) sessionVersionField.getValue()).longValue());
        map.put("releaseCounter", getReleaseVersion());
        map.put("sessionDate", new Date());
        return MessageFormat.format(relTituloHistorico.getText(), map);
    }

    private void updateConfigurationValidation() {
        final File gitDir = new File(gitRepositoryDirField.getText());
        final File gitExecutable = new File(gitExecutableField.getText());
        final File ccDir = new File(ccVobDirField.getText());
        final File ccExecutable = new File(ccExecutableField.getText());
        final File ccCommitStampFile = new File(ccDir, "atualizacao-hash.txt");
        final File relArquivoRelatorio = new File(relArquivoHistoricoField.getText());
        final File ccRelatorioStampFile = new File(ccDir, "relatorio-hash.txt");

        String errorMessage = null;
        isConfigurationValid = true;
        if (!gitDir.exists() || !gitDir.isDirectory()) {
            if (errorMessage == null) {
                errorMessage = "O caminho do repositório Git não existe ou não é um diretório.";
            }
            isConfigurationValid = false;
            gitRepositoryDirField.setForeground(Color.red);
        } else {
            gitRepositoryDirField.setForeground(configurationPanel.getForeground());
        }

        if (!gitExecutable.exists() || !gitExecutable.isFile() || !gitExecutable.canExecute()) {
            if (errorMessage == null) {
                errorMessage = "O caminho da ferramenta GIT não existe ou não é arquivo executável.";
            }
            gitExecutableField.setForeground(Color.red);
            isConfigurationValid = false;
        } else {
            gitExecutableField.setForeground(configurationPanel.getForeground());
        }

        if (!ccDir.exists() || !ccDir.isDirectory()) {
            if (errorMessage == null) {
                errorMessage = "O caminho da view Clearcase não existe ou não é um diretório.";
            }
            ccVobDirField.setForeground(Color.red);
            isConfigurationValid = false;
        } else {
            ccVobDirField.setForeground(configurationPanel.getForeground());
        }

        if (!ccExecutable.exists() || !ccExecutable.isFile() || !ccExecutable.canExecute()) {
            if (errorMessage == null) {
                errorMessage = "O caminho da ferramenta ClearTool não existe ou não é arquivo executável.";
            }
            ccExecutableField.setForeground(Color.red);
            isConfigurationValid = false;
        } else {
            ccExecutableField.setForeground(configurationPanel.getForeground());
        }
        if (!relArquivoRelatorio.exists() || !relArquivoRelatorio.isFile()) {
            if (errorMessage == null) {
                errorMessage = "O caminho do arquivo de historico não existe.";
            }
            relArquivoHistoricoField.setForeground(Color.red);
            isConfigurationValid = false;
        } else {
            relArquivoHistoricoField.setForeground(configurationPanel.getForeground());
        }

        if (!ccCommitStampFile.exists() || !ccCommitStampFile.isFile()) {
            isConfigurationValid = false;
            if (errorMessage == null) {
                errorMessage = "O caminho da marca de sincronização na view Clearcase não existe ou não é um arquivo válido.";
            }
        }
        if (!ccRelatorioStampFile.exists() || !ccRelatorioStampFile.isFile()) {
            isConfigurationValid = false;
            if (errorMessage == null) {
                errorMessage = "O caminho da marca de relatório na view Clearcase não existe ou não é um arquivo válido.";
            }
        }

        if (errorMessage != null) {
            configurationValidationMessageField.setText(errorMessage);
            configurationValidationMessageField.setForeground(Color.red);
        } else {
            configurationValidationMessageField.setText("As configurações estão corretas.");
            configurationValidationMessageField.setForeground(configurationPanel.getForeground());
        }
    }

    private void runSynchronization() {
        final GitCommander gitCommander;
        final ClearToolCommander clearToolCommander;
        final File ccDir;
        final File gitDir;
        final SyncTask syncTask;
        try {
            gitCommander = getGitCommander();
            clearToolCommander = getClearToolCommander();
            ccDir = getCcDir();
            gitDir = getGitDir();

            syncTask = new SyncTask(gitCommander, clearToolCommander, gitDir, ccDir);
            syncTask.setFastForward(gitFastForwardField.isSelected());
            syncTask.setFetchFromRemote(gitFetchRemoteField.isSelected());
            syncTask.setHeadline(ccActivityHeadlinePatternField.getText());
            syncTask.setCommitFile(getCcCommitStampFile());
            syncTask.setCreateActivity(ccCreateActivityField.isSelected());
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Parâmetros inválidos", JOptionPane.ERROR_MESSAGE);
            return;
        }


        tarefa = tarefaExecutor.submit(new Runnable() {
            public void run() {
                SwingUtilities.invokeLater(new Runnable() {
                    public void run() {
                        jButton1.setEnabled(false);
                        jTabbedPane6.setSelectedComponent(executionPanel);
                        logListModel.clear();
                    }
                });

                try {
                    syncTask.call();

                } catch (final Exception e) {
                    SwingUtilities.invokeLater(new Runnable() {
                        public void run() {
                            String mensagem = "Falha ao sincronizar view ClearCase com repositório GIT.\n" + e.getMessage();
                            Exception ee = e;
                            while (ee.getCause() != null && ee.getCause() != ee) {
                                ee = (Exception) ee.getCause();
                                mensagem += "\n" + ee.getMessage();
                            }
                            JOptionPane.showMessageDialog(MainFrame.this, mensagem, "Erro na sincronização", JOptionPane.ERROR_MESSAGE);
                        }
                    });
                } finally {
                    SwingUtilities.invokeLater(new Runnable() {
                        public void run() {
                            jButton1.setEnabled(true);
                        }
                    });
                    synchronized (MainFrame.this) {
                        tarefa = null;
                    }
                }
            }
        });
    }

    private void runHistoryPreview() {
        final GitCommander gitCommander;
        //
        final String historicoCommit;
        final String atualizacaoCommit;
        final File arquivoHistorico;
        try {
            gitCommander = getGitCommander();
            arquivoHistorico = getArquivoHistorico();
            historicoCommit = getCommitHistorico();
            atualizacaoCommit = getCommitOrigemAtualizacao();
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Parâmetros inválidos", JOptionPane.ERROR_MESSAGE);
            return;
        }

        tarefa = tarefaExecutor.submit(new Runnable() {
            public void run() {
                SwingUtilities.invokeLater(new Runnable() {
                    public void run() {
                        jbPrepararRelatorio.setEnabled(false);
                        jbEfetivarRelatorio.setEnabled(false);
//                        jTabbedPane6.setSelectedComponent(executionPanel);
                        logListModel.clear();
                    }
                });
                try {
                    /* Passo 1: Recuperar atividades realizadas entre o último histórico efetivado e último commit de atividades
                     */
                    String content = gitCommander.commitMessagesReport(historicoCommit, atualizacaoCommit, "%s%n");
                    if (content == null) {
                        return;
                    }

                    /* Passo 2: Classificar as mensagens recuperadas de acordo com o propósito do relatório de histórico a ser gerado
                     */
                    Callable<History> historicoBuilder = new JConsueloHistoricoBuilder(content, getTituloHistorico());
                    History history = historicoBuilder.call();

                    /* Passo 3: Processar o documento de histórico de versões em formato HTML (porque é mais bonitinho)
                     */
                    Callable<String> previewBuilder = new HistoryPreviewBuilder(history, arquivoHistorico);
                    String htmlPreview = previewBuilder.call();
                    
                    /* Passo 4: Atualizar a tela com o relatório a ser gerado
                     */
                    jePreview.setText(htmlPreview);
                    jbEfetivarRelatorio.setEnabled(true);
                } catch (final Exception e) {
                    SwingUtilities.invokeLater(new Runnable() {
                        public void run() {
                            String mensagem = "Falha ao gerar preview do histórico.\n" + e.getMessage();
                            Exception ee = e;
                            while (ee.getCause() != null && ee.getCause() != ee) {
                                ee = (Exception) ee.getCause();
                                mensagem += "\n" + ee.getMessage();
                            }
                            JOptionPane.showMessageDialog(MainFrame.this, mensagem, "History Preview Error", JOptionPane.ERROR_MESSAGE);
                        }
                    });
                } finally {
                    SwingUtilities.invokeLater(new Runnable() {
                        public void run() {
                            jbPrepararRelatorio.setEnabled(true);
                        }
                    });
                    synchronized (MainFrame.this) {
                        tarefa = null;
                    }
                }
            }
        });
    }

    private void runHistorySynchronization() {
        final ClearToolCommander clearToolCommander;
        //
        final String atualizacaoCommit;
        final File arquivoHistoricoPath;
        final File ccRelatorioStampFile;
        final File ccRelatorioVersaoStampFile;
        final File ccRelatorioReleaseStampFile;

        final Long version;
        final Long releaseVersion;
        try {
            clearToolCommander = getClearToolCommander();
            ccRelatorioStampFile = getCcRelatorioStampFile();
            ccRelatorioVersaoStampFile = getCcRelatorioVersaoStampFile();
            ccRelatorioReleaseStampFile = getCcRelatorioReleaseStampFile();
            arquivoHistoricoPath = getArquivoHistorico();

            atualizacaoCommit = getCommitOrigemAtualizacao();
            version = new Long(sessionVersionField.getValue().toString());
            releaseVersion = getReleaseVersion() + 1L;
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Parâmetros inválidos para efetivar histórico", JOptionPane.ERROR_MESSAGE);
            return;
        }

        tarefa = tarefaExecutor.submit(new Runnable() {
            public void run() {
                SwingUtilities.invokeLater(new Runnable() {
                    public void run() {
                        jbPrepararRelatorio.setEnabled(false);
                        jbEfetivarRelatorio.setEnabled(false);
                        sessionVersionField.setEnabled(false);
                        logListModel.clear();
                    }
                });
                try {
                    /* Passo 1: Criar atividade no CC
                     */
                    clearToolCommander.createActivity("Geração de Histórico de Atividade " + version + "." + releaseVersion);

                    /* Passo 2: Realizar checkout dos arquivos necessários
                     */
                    List<File> checkoutList = Arrays.asList(arquivoHistoricoPath, ccRelatorioVersaoStampFile, ccRelatorioReleaseStampFile);
                    clearToolCommander.checkoutFiles(checkoutList);

                    /* Passo 3: Atualizar arquivo de historico e controle de versões
                     */
                    Callable<String> mergeCall = new JConsueloHistoricoMerge(arquivoHistoricoPath, jePreview.getText());
                    String htmlContent = mergeCall.call();
                    Callable<Boolean> ccWriterUpdate = new JConsueloHistoricoWritter(arquivoHistoricoPath, htmlContent,
                            ccRelatorioStampFile, atualizacaoCommit,
                            ccRelatorioVersaoStampFile, version,
                            ccRelatorioReleaseStampFile, releaseVersion);
                    boolean success = ccWriterUpdate.call();

                    /* Passo 4: Checkin em todos os arquivos
                     */
                    clearToolCommander.checkinFiles(checkoutList);

                    /* Passo 5: Notificar usuario sobre sucesso a operação
                     */
                    JOptionPane.showMessageDialog(
                            MainFrame.this, success?"Operação executada com sucesso!":"Não foi possível atualizar arquivos de versão do Clear Case",
                            "History Proccess", success?JOptionPane.INFORMATION_MESSAGE:JOptionPane.ERROR_MESSAGE);
                    jePreview.setText("");
                } catch (final Exception e) {
                    SwingUtilities.invokeLater(new Runnable() {
                        public void run() {
                            String mensagem = "Falha ao gerar preview do histórico.\n" + e.getMessage();
                            Exception ee = e;
                            while (ee.getCause() != null && ee.getCause() != ee) {
                                ee = (Exception) ee.getCause();
                                mensagem += "\n" + ee.getMessage();
                            }
                            JOptionPane.showMessageDialog(MainFrame.this, mensagem, "History Preview Error", JOptionPane.ERROR_MESSAGE);
                        }
                    });
                } finally {
                    SwingUtilities.invokeLater(new Runnable() {
                        public void run() {
                            jbPrepararRelatorio.setEnabled(true);
                            sessionVersionField.setEnabled(true);
                        }
                    });
                    synchronized (MainFrame.this) {
                        tarefa = null;
                    }
                }
            }
        });
    }

    private Long getReleaseVersion() throws IOException {
        File ccRelatorioReleaseStampFile = getCcRelatorioReleaseStampFile();
        String value = new Scanner(ccRelatorioReleaseStampFile).next();
        return new Long(value);
    }

    private Long getVersion() throws IOException {
        File ccRelatorioVersaoStampFile = getCcRelatorioVersaoStampFile();
        String value = new Scanner(ccRelatorioVersaoStampFile).next();
        return new Long(value);
    }

    private String getCommitOrigemAtualizacao() throws IOException, FileNotFoundException {
        File ccCommitStampFile = getCcCommitStampFile();
        String previousCommit = new Scanner(ccCommitStampFile).next();
        return previousCommit;
    }

    private String getCommitHistorico() throws IOException, FileNotFoundException {
        File ccRelatorioStampFile = getCcRelatorioStampFile();
        String previousCommit = new Scanner(ccRelatorioStampFile).next();
        return previousCommit;
    }

    private ClearToolCommander getClearToolCommander() throws IOException {
        File ccDir = getCcDir();
        File ccExecutable = getCcExecutable();
        ClearToolProcessBuilder clearToolProcessBuilder = new ClearToolProcessBuilder(ccDir, ccExecutable);
        ClearToolCommander clearToolCommander = new ClearToolCommander(clearToolProcessBuilder);
        return clearToolCommander;
    }

    private File getCcCommitStampFile() throws IOException {
        final File ccCommitStampFile = new File(getCcDir(), "atualizacao-hash.txt");
        if (!ccCommitStampFile.exists() || !ccCommitStampFile.isFile()) {
            throw new IOException("O caminho da marca de sincronização na view do Clearcase não existe ou não é um arquivo válido.");
        }
        return ccCommitStampFile;
    }

    private File getCcRelatorioStampFile() throws IOException {
        final File ccRelatorioStampFile = new File(getCcDir(), "relatorio-hash.txt");
        if (!ccRelatorioStampFile.exists() || !ccRelatorioStampFile.isFile()) {
            throw new IOException("O caminho da marca de relatório na view do Clearcase não existe ou não é um arquivo válido.");
        }
        return ccRelatorioStampFile;
    }

    private File getCcRelatorioVersaoStampFile() throws IOException {
        final File ccRelatorioVersaoStampFile = new File(getCcDir(), "relatorio-version.txt");
        if (!ccRelatorioVersaoStampFile.exists() || !ccRelatorioVersaoStampFile.isFile()) {
            throw new IOException("O caminho da marca de versão do relatório na view do Clearcase não existe ou não é um arquivo válido.");
        }
        return ccRelatorioVersaoStampFile;
    }

    private File getCcRelatorioReleaseStampFile() throws IOException {
        final File ccRelatorioVersaoStampFile = new File(getCcDir(), "relatorio-release.txt");
        if (!ccRelatorioVersaoStampFile.exists() || !ccRelatorioVersaoStampFile.isFile()) {
            throw new IOException("O caminho da marca de versão do relatório na view do Clearcase não existe ou não é um arquivo válido.");
        }
        return ccRelatorioVersaoStampFile;
    }

    private File getCcExecutable() throws IOException {
        final File ccExecutable = new File(ccExecutableField.getText());
        if (!ccExecutable.exists() || !ccExecutable.isFile() || !ccExecutable.canExecute()) {
            throw new IOException("O caminho da ferramenta ClearTool não existe ou não é arquivo executável.");
        }
        return ccExecutable;
    }

    private File getArquivoHistorico() throws IOException {
        final File relArquivoHistorico = new File(relArquivoHistoricoField.getText());
        if (!relArquivoHistorico.exists() || !relArquivoHistorico.isFile()) {
            throw new IOException("O caminho do arquivo de histórico não existe ou não é arquivo válido.");
        }
        return relArquivoHistorico;
    }

    private File getCcDir() throws IOException {
        final File ccDir = new File(ccVobDirField.getText());
        if (!ccDir.exists() || !ccDir.isDirectory()) {
            throw new IOException("O caminho da view Clearcase não existe ou não é um diretório.");
        }
        return ccDir;
    }

    private GitCommander getGitCommander() throws IOException {
        File gitDir = getGitDir();
        File gitExecutable = getGitExecutable();
        final GitProcessBuilder gitProcessBuilder = new GitProcessBuilder(gitDir, gitExecutable);
        GitCommander gitCommander = new GitCommander(gitProcessBuilder);
        return gitCommander;
    }

    private File getGitExecutable() throws IOException {
        final File gitExecutable = new File(gitExecutableField.getText());
        if (!gitExecutable.exists() || !gitExecutable.isFile() || !gitExecutable.canExecute()) {
            throw new IOException("O caminho da ferramenta GIT não existe ou não é arquivo executável.");
        }
        return gitExecutable;
    }

    private File getGitDir() throws IOException {
        final File gitDir = new File(gitRepositoryDirField.getText());
        if (!gitDir.exists() || !gitDir.isDirectory()) {
            throw new IOException("O caminho do repositório Git não existe ou não é um diretório.");
        }
        return gitDir;
    }

    private void updateVersion() {
        try {
            Long newValue = new Long(sessionVersionField.getValue().toString());
            Long currentValue = getVersion();
            if (newValue < currentValue) {
                sessionVersionField.setValue(currentValue);
                JOptionPane.showMessageDialog(MainFrame.this, "A versão não pode retroceder!", "Version update", JOptionPane.ERROR_MESSAGE);
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(MainFrame.this, "Erro ao recuperar valor da versão: " + e.getMessage(), "Version update", JOptionPane.ERROR_MESSAGE);
        }
    }
}
