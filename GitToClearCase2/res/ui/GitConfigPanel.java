/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.danielferber.gittocc2.ui;

import br.com.danielferber.gittocc2.config.EnvironmentConfig;
import br.com.danielferber.gittocc2.config.EnvironmentConfigBean;
import br.com.danielferber.gittocc2.config.EnvironmentConfigException;
import br.com.danielferber.gittocc2.config.EnvironmentConfigPojo;
import br.com.danielferber.gittocc2.config.EnvironmentConfigValidated;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import javax.swing.SwingWorker;

/**
 *
 * @author Daniel
 */
public class GitConfigPanel extends javax.swing.JPanel {

    final ScheduledExecutorService executor = Executors.newScheduledThreadPool(1);
    final SwingWorker<Void, Void> validationWorker;

    public GitConfigPanel() {
        this(new EnvironmentConfigPojo());
    }

    /**
     * Creates new form EnvironmentConfigPanel
     */
    public GitConfigPanel(EnvironmentConfig gitConfig) {
        this.bean = new EnvironmentConfigBean(gitConfig);
        initComponents();
        validationWorker = createValidationWorker();
        this.bean.addPropertyChangeListener(new PropertyChangeListener() {
            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                System.out.print(evt);
                executor.schedule(validationWorker, 2, TimeUnit.SECONDS);
            }
        });
    }

    private SwingWorker<Void, Void> createValidationWorker() {
        return new SwingWorker<Void, Void>() {
            EnvironmentConfigValidated gitConfigValidated = new EnvironmentConfigValidated(bean);
            Exception gitExecException, repositoryDirException;

            @Override
            protected Void doInBackground() throws Exception {
                try {
                    gitConfigValidated.getGitExec();
                    gitExecException = null;
                } catch (EnvironmentConfigException e) {
                    gitExecException = e;
                }
                try {
                    gitConfigValidated.getRepositoryDir();
                    repositoryDirException = null;
                } catch (EnvironmentConfigException e) {
                    repositoryDirException = e;
                }
                return null;
            }

            @Override
            protected void done() {
                if (gitExecException == null) {
                    System.out.println(gitExecException);
                }
                if (repositoryDirException == null) {
                    System.out.println(repositoryDirException);
                }
            }
        };
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        bean = new br.com.danielferber.gittocc2.config.EnvironmentConfigBean();
        fileConverter = new br.com.danielferber.gittocc2.ui.swing.FileConverter();
        jLabel1 = new javax.swing.JLabel();
        gitExecField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();

        jLabel1.setText("Git Executable:");

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, bean, org.jdesktop.beansbinding.ELProperty.create("${gitExec}"), gitExecField, org.jdesktop.beansbinding.BeanProperty.create("text"), "gitExec");
        binding.setConverter(fileConverter);
        bindingGroup.addBinding(binding);

        jLabel2.setText("Repository:");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, bean, org.jdesktop.beansbinding.ELProperty.create("${repositoryDir}"), jTextField1, org.jdesktop.beansbinding.BeanProperty.create("text"), "repositoryDir");
        binding.setConverter(fileConverter);
        bindingGroup.addBinding(binding);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(gitExecField, javax.swing.GroupLayout.DEFAULT_SIZE, 264, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField1))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(gitExecField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        bindingGroup.bind();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private br.com.danielferber.gittocc2.config.EnvironmentConfigBean bean;
    private br.com.danielferber.gittocc2.ui.swing.FileConverter fileConverter;
    private javax.swing.JTextField gitExecField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField jTextField1;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

}
